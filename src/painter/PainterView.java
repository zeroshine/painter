/*
 * PainterView.java
 */

package painter;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.Image.*;
import java.awt.Graphics;
import java.awt.Point;
/**
 * The application's main frame.
 */
public class PainterView extends FrameView {
    
    
        int nowx=0,nowy=0,newx=0,newy=0,clicktime=0,cursorx,cursory;
        boolean setline = false,click=false,setpreimg=false;
        boolean setpen = false,setsquare = false,setcircle=false,seteraser=false,newcursor=false;
        int erw=10,erh=10,num=0;
        Image pic[]=new Image[999];
        Color col=Color.black;
        Image preimage,cursor;
        Graphics g,n;
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        
    public PainterView(SingleFrameApplication app) {
        
        super(app);
        
        initComponents();
        


               
        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
            
        });
        
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = PainterApp.getApplication().getMainFrame();
            aboutBox = new PainterAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        PainterApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        canvas1 = new java.awt.Canvas();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(painter.PainterApp.class).getContext().getResourceMap(PainterView.class);
        jButton1.setIcon(resourceMap.getIcon("jButton1.icon")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                line(evt);
            }
        });

        canvas1.setBackground(resourceMap.getColor("canvas1.background")); // NOI18N
        canvas1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        canvas1.setName("canvas1"); // NOI18N
        canvas1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mousePress(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                mouserelease(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mouseClick(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                mouseenter(evt);
            }
        });
        canvas1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                mouseMove(evt);
            }
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                mouseDrag(evt);
            }
        });

        jButton2.setIcon(resourceMap.getIcon("jButton2.icon")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setMaximumSize(new java.awt.Dimension(40, 40));
        jButton2.setMinimumSize(new java.awt.Dimension(40, 40));
        jButton2.setName("jButton2"); // NOI18N
        jButton2.setPreferredSize(new java.awt.Dimension(40, 40));
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pen(evt);
            }
        });

        jButton3.setIcon(resourceMap.getIcon("jButton3.icon")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                square(evt);
            }
        });

        jButton4.setIcon(resourceMap.getIcon("jButton4.icon")); // NOI18N
        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setActionCommand(resourceMap.getString("jButton4.actionCommand")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                circle(evt);
            }
        });

        jButton5.setIcon(resourceMap.getIcon("jButton5.icon")); // NOI18N
        jButton5.setText(resourceMap.getString("jButton5.text")); // NOI18N
        jButton5.setName("jButton5"); // NOI18N
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eracer(evt);
            }
        });

        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        jButton6.setBackground(resourceMap.getColor("jButton6.background")); // NOI18N
        jButton6.setForeground(resourceMap.getColor("jButton6.foreground")); // NOI18N
        jButton6.setIcon(resourceMap.getIcon("jButton6.icon")); // NOI18N
        jButton6.setText(resourceMap.getString("jButton6.text")); // NOI18N
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setName("jButton6"); // NOI18N
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                red(evt);
            }
        });
        jToolBar1.add(jButton6);

        jButton7.setIcon(resourceMap.getIcon("jButton7.icon")); // NOI18N
        jButton7.setText(resourceMap.getString("jButton7.text")); // NOI18N
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setName("jButton7"); // NOI18N
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orange(evt);
            }
        });
        jToolBar1.add(jButton7);

        jButton8.setIcon(resourceMap.getIcon("jButton8.icon")); // NOI18N
        jButton8.setText(resourceMap.getString("jButton8.text")); // NOI18N
        jButton8.setFocusable(false);
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton8.setName("jButton8"); // NOI18N
        jButton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                yellow(evt);
            }
        });
        jToolBar1.add(jButton8);

        jButton9.setIcon(resourceMap.getIcon("jButton9.icon")); // NOI18N
        jButton9.setText(resourceMap.getString("jButton9.text")); // NOI18N
        jButton9.setFocusable(false);
        jButton9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton9.setName("jButton9"); // NOI18N
        jButton9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                green(evt);
            }
        });
        jToolBar1.add(jButton9);

        jButton10.setIcon(resourceMap.getIcon("jButton10.icon")); // NOI18N
        jButton10.setText(resourceMap.getString("jButton10.text")); // NOI18N
        jButton10.setFocusable(false);
        jButton10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton10.setName("jButton10"); // NOI18N
        jButton10.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setblue(evt);
            }
        });
        jToolBar1.add(jButton10);

        jButton11.setIcon(resourceMap.getIcon("jButton11.icon")); // NOI18N
        jButton11.setText(resourceMap.getString("jButton11.text")); // NOI18N
        jButton11.setFocusable(false);
        jButton11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton11.setName("jButton11"); // NOI18N
        jButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                magenta(evt);
            }
        });
        jToolBar1.add(jButton11);

        jButton12.setIcon(resourceMap.getIcon("jButton12.icon")); // NOI18N
        jButton12.setText(resourceMap.getString("jButton12.text")); // NOI18N
        jButton12.setFocusable(false);
        jButton12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton12.setName("jButton12"); // NOI18N
        jButton12.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                black(evt);
            }
        });
        jToolBar1.add(jButton12);

        jButton13.setIcon(resourceMap.getIcon("jButton13.icon")); // NOI18N
        jButton13.setText(resourceMap.getString("jButton13.text")); // NOI18N
        jButton13.setFocusable(false);
        jButton13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton13.setName("jButton13"); // NOI18N
        jButton13.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gray(evt);
            }
        });
        jToolBar1.add(jButton13);

        jButton14.setIcon(resourceMap.getIcon("jButton14.icon")); // NOI18N
        jButton14.setText(resourceMap.getString("jButton14.text")); // NOI18N
        jButton14.setName("jButton14"); // NOI18N
        jButton14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                undo(evt);
            }
        });

        jButton15.setIcon(resourceMap.getIcon("jButton15.icon")); // NOI18N
        jButton15.setText(resourceMap.getString("jButton15.text")); // NOI18N
        jButton15.setName("jButton15"); // NOI18N
        jButton15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                redo(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, 1392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(187, 187, 187)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1117, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton2, 0, 0, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(painter.PainterApp.class).getContext().getActionMap(PainterView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 864, Short.MAX_VALUE)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(statusMessageLabel)))
                .addGap(497, 497, 497)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

private void line(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_line
// TODO add your handling code here:
    checksetpreimg();
    setline=setline?false:true;
    setpen=false;
    setsquare=false;
    setcircle=false;
    seteraser=false;
    if(setline==true){
        cursor=toolkit.getImage("src/painter/resources/cross.png");
        newcursor=true;
    }
    else{
        newcursor=false;
    }
}//GEN-LAST:event_line

void checksetpreimg(){
    if(setpreimg==false){
         preimage = canvas1.createImage(canvas1.getWidth(), canvas1.getHeight());
         g=canvas1.getGraphics();
         n=preimage.getGraphics();
         setpreimg=true;
         savepic();
        }
}

private void mouseClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseClick
// TODO add your handling code here:
    if(setline==true){
        if(clicktime==0){
            nowx=evt.getX();
            nowy=evt.getY();        
            g.setColor(col);
            n.setColor(col);
            click=true;
            clicktime=1;
            
        }
        else
        if(clicktime==1){
            
            newx=evt.getX();
            newy=evt.getY();
            n.drawLine(nowx, nowy, newx, newy);
            savepic();
            click=false;
            clicktime=0;
        }
    }
    else if(setsquare==true){
        if(clicktime==0){
            nowx=evt.getX();
            nowy=evt.getY();
            g.setColor(col);
            n.setColor(col);
            click=true;
            clicktime=1;
            
        }
        else
        if(clicktime==1){
            
            newx=evt.getX();
            newy=evt.getY();
            if(newx>nowx&&newy>nowy){
                n.drawRect(nowx, nowy, newx-nowx, newy-nowy);
                savepic();
            }
            else if(nowx>newx&&newy>nowy){
                n.drawRect(newx, nowy, nowx-newx, newy-nowy);
                savepic();
            }
            else if(newx>nowx&&nowy>newy){
                n.drawRect(nowx, newy, newx-nowx, nowy-newy);
                savepic();
            }
            else if(nowx>newx&&nowy>newy){
                n.drawRect(newx, newy, nowx-newx, nowy-newy);
                savepic();
            }
            click=false;
            clicktime=0;
        }
    }
    else if(setcircle==true){
        if(clicktime==0){
            g.setColor(col);
            n.setColor(col);
            nowx=evt.getX();
            nowy=evt.getY();
            click=true;
            clicktime=1;
            
        }
        else
        if(clicktime==1){
            newx=evt.getX();
            newy=evt.getY();
            if(newx>nowx&&newy>nowy){
                 n.drawOval(nowx, nowy, newx-nowx, newy-nowy);
                 savepic();
            }
            else if(nowx>newx&&newy>nowy){
                 n.drawOval(newx, nowy, nowx-newx, newy-nowy);
                 savepic();
            }   
            else if(newx>nowx&&nowy>newy){
                 n.drawOval(nowx, newy, newx-nowx, nowy-newy);
                 savepic();
            }
            else if(nowx>newx&&nowy>newy){
                 n.drawOval(newx, newy, nowx-newx, nowy-newy);
                 savepic();
            }
            click=false;
            clicktime=0;
        }
        
    }

}//GEN-LAST:event_mouseClick


private void mouseMove(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseMove
// TODO add your handling code here:
    
       if(click==true){     
            newx=evt.getX();
            newy=evt.getY();
            if(setline==true){
                g.drawImage(preimage, 0, 0, Color.white, null);
                g.drawLine(nowx, nowy, newx, newy);             
            }
            else if(setsquare==true){
                g.drawImage(preimage, 0, 0, Color.white, null);
                if(newx>nowx&&newy>nowy)
                    g.drawRect(nowx, nowy, newx-nowx, newy-nowy);
                else if(nowx>newx&&newy>nowy)
                    g.drawRect(newx, nowy, nowx-newx, newy-nowy);
                else if(newx>nowx&&nowy>newy)
                    g.drawRect(nowx, newy, newx-nowx, nowy-newy);
                else if(nowx>newx&&nowy>newy)
                    g.drawRect(newx, newy, nowx-newx, nowy-newy);
            }
            else if(setcircle==true){
                g.drawImage(preimage, 0, 0, Color.white, null);
               if(newx>nowx&&newy>nowy)
                    g.drawOval(nowx, nowy, newx-nowx, newy-nowy);
                else if(nowx>newx&&newy>nowy)
                    g.drawOval(newx, nowy, nowx-newx, newy-nowy);
                else if(newx>nowx&&nowy>newy)
                    g.drawOval(nowx, newy, newx-nowx, nowy-newy);
                else if(nowx>newx&&nowy>newy)
                    g.drawOval(newx, newy, nowx-newx, nowy-newy);
            
            
            }
       }
       
}//GEN-LAST:event_mouseMove

private void pen(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pen
// TODO add your handling code here:
    checksetpreimg();
    setpen=setpen?false:true;
    setline=false;
    setsquare=false;
    setcircle=false;
    seteraser=false;
    if(setpen==true){
        cursor=toolkit.getImage("src/painter/resources/pencil.png");
        cursorx=mainPanel.getX()+3;
        cursory=mainPanel.getY()+15;
        newcursor=true;
        
    }
    else{
        newcursor=false;
    }
}//GEN-LAST:event_pen

private void mouseDrag(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseDrag
// TODO add your handling code here:
     if(setpen==true){
            newx=evt.getX();
            newy=evt.getY();
            g.drawLine(nowx, nowy, newx, newy);
            n.drawLine(nowx, nowy, newx, newy);
            nowx=newx;
            nowy=newy;
       
    }
    else if(seteraser==true){
        newx=evt.getX();
        newy=evt.getY();
        g.clearRect(newx, newy, erw, erh);
        n.clearRect(newx, newy, erh, erh);
    }
}//GEN-LAST:event_mouseDrag

private void mousePress(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mousePress
// TODO add your handling code here:
    
    if(setpen==true){
        g.setColor(col);
        n.setColor(col);
                nowx=evt.getX();
                nowy=evt.getY();
        } 
    if(seteraser==true){
        nowx=evt.getX();
        nowy=evt.getY();
        newx=evt.getX();
        newy=evt.getY();
        g.clearRect(newx, newy, erw, erh);
        n.clearRect(newx, newy, erh, erh);
    }
}//GEN-LAST:event_mousePress

private void square(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_square
// TODO add your handling code here:
    checksetpreimg();
    setsquare=setsquare?false:true;
    setline=false;
    setpen=false;
    setcircle=false;
    seteraser=false;
    if(setsquare==true){
        cursor=toolkit.getImage("src/painter/resources/cross.png");
        cursorx=mainPanel.getX()+6;
        cursory=mainPanel.getY()+6;
        newcursor=true;
    }
    else{
        newcursor=false;
    }
}//GEN-LAST:event_square

private void circle(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_circle
// TODO add your handling code here:
    checksetpreimg();
    setcircle=setcircle?false:true;
    setsquare=false;
    setline=false;
    setpen=false;
    seteraser=false;
    if(setcircle==true){
        cursor=toolkit.getImage("src/painter/resources/cross.png");
        cursorx=mainPanel.getX()+6;
        cursory=mainPanel.getY()+6;
        newcursor=true;
    }
    else{
        newcursor=false;
    }
}//GEN-LAST:event_circle

private void eracer(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eracer
// TODO add your handling code here:
    checksetpreimg();
    seteraser=seteraser?false:true;
    setsquare=false;
    setline=false;
    setpen=false;
    setcircle=false;
    if(seteraser==true){
        cursor=toolkit.getImage("src/painter/resources/square-dashed.png");
        cursorx=mainPanel.getX()+3;
        cursory=mainPanel.getY()+3;
        newcursor=true;
    }
    else{
        newcursor=false;
    }
}//GEN-LAST:event_eracer


    private void red(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_red
        col=Color.red;
    }//GEN-LAST:event_red

    private void orange(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orange
        col=Color.orange;
    }//GEN-LAST:event_orange

    private void yellow(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yellow
        col=Color.yellow;
    }//GEN-LAST:event_yellow

    private void green(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_green
        col=Color.green;
    }//GEN-LAST:event_green

    private void setblue(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_setblue
        col=Color.blue;
    }//GEN-LAST:event_setblue

    private void magenta(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_magenta
        col= Color.magenta;
    }//GEN-LAST:event_magenta

    private void black(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_black
        col=Color.black;
    }//GEN-LAST:event_black

    private void gray(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gray
        col=Color.gray;   
    }//GEN-LAST:event_gray

    private void mouseenter(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseenter
        // TODO add your handling code here:
        if(newcursor==true){
                Cursor c = toolkit.createCustomCursor(cursor , new Point(cursorx,cursory), "img");
                canvas1.setCursor (c);
        }
        
        else {
            Cursor c =Cursor.getDefaultCursor();
            canvas1.setCursor(c);
        }
    }//GEN-LAST:event_mouseenter

    private void mouserelease(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouserelease
        // TODO add your handling code here:
        if(setpen==true||seteraser==true){
                savepic();
        }
    }//GEN-LAST:event_mouserelease

    private void undo(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_undo
        // TODO add your handling code here:
        if(num>0){num--;
        //g.clearRect(0, 0, canvas1.getWidth(), canvas1.getHeight());
        g.drawImage(pic[num], 0, 0, Color.white,null);
        n.drawImage(pic[num], 0, 0, Color.white, null);
        }
        
    }//GEN-LAST:event_undo

    private void redo(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redo
        // TODO add your handling code here:
        if(num!=0)num++;
        g.drawImage(pic[num], 0, 0, Color.white,null);
        n.drawImage(pic[num], 0, 0, Color.white, null);
    }//GEN-LAST:event_redo
void savepic(){
    if(num==998) num=0;
    num++;
    pic[num]=canvas1.createImage(canvas1.getWidth(), canvas1.getHeight());
    pic[num].getGraphics().drawImage(preimage, 0, 0, Color.white, null);
    
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Canvas canvas1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
